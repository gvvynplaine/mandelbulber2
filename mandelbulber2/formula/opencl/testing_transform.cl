/**
 * Mandelbulber v2, a 3D fractal generator  _%}}i*<.        ____                _______
 * Copyright (C) 2020 Mandelbulber Team   _>]|=||i=i<,     / __ \___  ___ ___  / ___/ /
 *                                        \><||i|=>>%)    / /_/ / _ \/ -_) _ \/ /__/ /__
 * This file is part of Mandelbulber.     )<=i=]=|=i<>    \____/ .__/\__/_//_/\___/____/
 * The project is licensed under GPLv3,   -<>>=|><|||`        /_/
 * see also COPYING file in this folder.    ~+{i%+++
 *
 * Based on a DarkBeam fold formula adapted by Knighty
 * MandalayBox  Fragmentarium /Examples/ Knighty Collection

 * This file has been autogenerated by tools/populateUiInformation.php
 * from the file "fractal_testing_transform.cpp" in the folder formula/definition
 * D O    N O T    E D I T    T H I S    F I L E !
 */

REAL4 TestingTransformIteration(REAL4 z, __constant sFractalCl *fractal, sExtendedAuxCl *aux)
{

	// REAL4 c = aux->const_c;
	// REAL colorAdd = 0.0f;

	// sphere inversion
	if (fractal->transformCommon.sphereInversionEnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsX
			&& aux->i < fractal->transformCommon.stopIterations1)
	{
		z += fractal->transformCommon.offset000;
		REAL rr = dot(z, z);
		z *= fractal->transformCommon.scaleG1 / rr;
		aux->DE *= (fractal->transformCommon.scaleG1 / rr);
		z += fractal->transformCommon.additionConstant000 - fractal->transformCommon.offset000;
		z *= fractal->transformCommon.scaleA1;
		aux->DE *= fractal->transformCommon.scaleA1;
	}
	// REAL4 oldZ = z;
	z.x = fabs(z.x + fractal->transformCommon.additionConstant111.x)
				- fabs(z.x - fractal->transformCommon.additionConstant111.x) - z.x;
	z.y = fabs(z.y + fractal->transformCommon.additionConstant111.y)
				- fabs(z.y - fractal->transformCommon.additionConstant111.y) - z.y;
	if (fractal->transformCommon.functionEnabledJFalse)
		z.z = fabs(z.z + fractal->transformCommon.additionConstant111.z)
					- fabs(z.z - fractal->transformCommon.additionConstant111.z) - z.z;
	// REAL4 zCol = z;

	// offset
	z += fractal->transformCommon.offsetF000;

	REAL4 p = z;
	REAL dd = aux->DE;
	REAL m = 0.0f;
	REAL tp = 0.0f;
	// sphere fold v1
	if (aux->i >= fractal->transformCommon.startIterationsM
			&& aux->i < fractal->transformCommon.stopIterationsM)
	{
		REAL4 signs = z;
		signs.x = sign(z.x);
		signs.y = sign(z.y);
		signs.z = sign(z.z);
		// signs.w = sign(z.w);
		z = fabs(z);
		z -= fractal->transformCommon.offsetA000;
		REAL trr = dot(z, z);

		tp = min(max(1.0f / trr, 1.0f), 1.0f / fractal->transformCommon.minR2p25);
		z += fractal->transformCommon.offsetA000;
		z *= tp;
		aux->DE *= tp;
		z *= signs;
	}

	// sphere fold std
	if (fractal->transformCommon.functionEnabledNFalse
			&& aux->i >= fractal->transformCommon.startIterationsN
			&& aux->i < fractal->transformCommon.stopIterationsN)
	{
		REAL rr = dot(p, p);
		p += fractal->mandelbox.offset;
		m = min(max(1.0f / rr, 1.0f), 1.0f / fractal->transformCommon.scale025);
		p *= m;
		dd *= m;
		p -= fractal->mandelbox.offset;
		// mix
		z = z + (p - z) * fractal->transformCommon.scale0;
		aux->DE = aux->DE + (dd - aux->DE) * fractal->transformCommon.scale0;
	}

	// scale
	REAL useScale = 1.0f;
	useScale = aux->actualScaleA + fractal->transformCommon.scale2;
	z *= useScale;
	aux->DE = aux->DE * fabs(useScale) + 1.0f;

	if (fractal->transformCommon.functionEnabledKFalse
			&& aux->i >= fractal->transformCommon.startIterationsK
			&& aux->i < fractal->transformCommon.stopIterationsK)
	{
		// update actualScaleA for next iteration
		REAL vary = fractal->transformCommon.scaleVary0
								* (fabs(aux->actualScaleA) - fractal->transformCommon.scaleC1);
		aux->actualScaleA -= vary;
	}

	// rotation1
	if (fractal->transformCommon.rotation2EnabledFalse
			&& aux->i >= fractal->transformCommon.startIterationsR
			&& aux->i < fractal->transformCommon.stopIterationsR)
	{
		z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix, z);
	}

	// offset2
	if (aux->i >= fractal->transformCommon.startIterationsO
			&& aux->i < fractal->transformCommon.stopIterationsO)
		z += fractal->transformCommon.additionConstantA000;

	// rotation2
	z = Matrix33MulFloat4(fractal->transformCommon.rotationMatrix2, z);

	if (fractal->analyticDE.enabledFalse)
		aux->DE = aux->DE * fractal->analyticDE.scale1 + fractal->analyticDE.offset0;

	// polynomial
	if (fractal->transformCommon.functionEnabledPFalse
			&& aux->i >= fractal->transformCommon.startIterationsP
			&& aux->i < fractal->transformCommon.stopIterationsP)
	{
		REAL4 temp = fractal->transformCommon.additionConstantP000;
		REAL4 temp2 = temp * temp;
		REAL4 z2 = z * z;
		z.x -=
			((temp.x * temp2.x) / (z2.x + temp2.x) - 2.0f * temp.x) * fractal->transformCommon.scaleD1;
		z.y -=
			((temp.y * temp2.y) / (z2.y + temp2.y) - 2.0f * temp.y) * fractal->transformCommon.scaleE1;
		z.z -=
			((temp.z * temp2.z) / (z2.z + temp2.z) - 2.0f * temp.z) * fractal->transformCommon.scaleF1;
	}

	if (fractal->foldColor.auxColorEnabledFalse)
	{
		aux->color += tp * fractal->mandelbox.color.factorSp1;
		aux->color += m * fractal->mandelbox.color.factorSp2;
	}

	// temp code
	REAL4 q = fabs(z);
	aux->dist = max(q.x, max(q.y, q.z));
	aux->dist = aux->dist / aux->DE;

	return z;
}